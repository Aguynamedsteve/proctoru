require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe Api::UsersController, type: :controller do
  college = College.create!({ name: Faker::University.name })
  exam = college.exams.create!({ title: Faker::Educator.course_name })
  exam_window = exam.create_exam_window({ start_time: DateTime.parse(2.hours.ago.to_s), end_time: DateTime.now })
  user = User.create!({
                        first_name: Faker::Name.first_name, 
                        last_name: Faker::Name.last_name, 
                        phone_number: Faker::PhoneNumber.phone_number,
                        exam_id: exam.id,
                        college_id: college.id
                      })

  describe "GET #index" do
    context "with invalid params" do
      it "renders a JSON response with error if college doesn't exist" do
        get :index, params: {
                              "first_name": Faker::Name.first_name, 
                              "last_name": Faker::Name.last_name, 
                              "phone_number": Faker::PhoneNumber.phone_number, 
                              "college_id": 1010101, 
                              "exam_id": exam.id, 
                              "start_time": DateTime.parse(1.hour.ago.to_s)
                            }
        expect(response).to have_http_status(:bad_request)
      end

      it "renders a JSON response with error if exam doesn't exist" do
        get :index, params: {
                              "first_name": Faker::Name.first_name, 
                              "last_name": Faker::Name.last_name, 
                              "phone_number": Faker::PhoneNumber.phone_number, 
                              "college_id": college.id, 
                              "exam_id": 3000, 
                              "start_time": DateTime.parse(1.hour.ago.to_s)
                            }
        expect(response).to have_http_status(:bad_request)
      end

      it "renders a JSON response with error if start_time falls outside of exam window" do
        get :index, params: {
                              "first_name": Faker::Name.first_name, 
                              "last_name": Faker::Name.last_name, 
                              "phone_number": Faker::PhoneNumber.phone_number, 
                              "college_id": college.id, 
                              "exam_id": exam.id, 
                              "start_time": DateTime.parse(11.hours.ago.to_s)
                            }
        expect(response).to have_http_status(:bad_request)
      end
    end
  end
end
